INCLUDE(CMakeForceCompiler)
cmake_minimum_required (VERSION 3.6)

# if variable PROJ was not declared, declare name to "basic_project"
if (PROJ)
else()
    set(PROJ "basic_project") 
endif()

project(${PROJ})

set(CMAKE_SYSTEM_NAME Generic)

message(STATUS "Using C compiler from ${CMAKE_C_COMPILER}")
message(STATUS "Using C++ compiler from ${CMAKE_CXX_COMPILER}")
message(STATUS "Project name ${PROJ}")

# All relative to project root, as generated by STM32CubeMX.
set(LIBS_DIR            ${CMAKE_SOURCE_DIR}/../../libs)
set(SOURCE_DIR          ${CMAKE_SOURCE_DIR})

# Where are user sources
file(GLOB_RECURSE USER_SOURCES_C "${SOURCE_DIR}/Src/*.c")
file(GLOB_RECURSE USER_SOURCES_CPP "${SOURCE_DIR}/Src/*.cpp")
# user libs source
file(GLOB_RECURSE USER_LIBS_SOURCES_CPP "${LIBS_DIR}/*.cpp")

# # user libs source
file(GLOB_RECURSE USER_LIBS_HEADERS_HPP "${LIBS_DIR}/Inc/*.hpp")

# Look here for header files.
include_directories(    ${SOURCE_DIR}/Inc)
include_directories(    ${LIBS_DIR}/**)

set(COMMON_FLAGS "-g")
set(CMAKE_CXX_FLAGS "${COMMON_FLAGS} -std=c++17 -fno-rtti")
set(CMAKE_C_FLAGS "${COMMON_FLAGS} -std=gnu11")
set(CMAKE_EXE_LINKER_FLAGS "-Wl,--gc-section -lc  -Wl,-Map=output.map")

add_executable(${PROJ} ${USER_SOURCES_C} ${USER_SOURCES_CPP} ${USER_LIBS_SOURCES_CPP} )

